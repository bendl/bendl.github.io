<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ben Lancaster</title>
    <link>http://bendl.me/blog/posts/</link>
    <description>Recent content in Posts on Ben Lancaster</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; Copyright 2018 Ben Lancaster</copyright>
    <lastBuildDate>Mon, 10 Mar 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://bendl.me/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>http://bendl.me/blog/posts/my-second-post/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://bendl.me/blog/posts/my-second-post/</guid>
      <description>Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>Assembler Basics for Instruction Sets</title>
      <link>http://bendl.me/blog/posts/compiler-assembler/</link>
      <pubDate>Sat, 10 Mar 2018 20:39:57 +0000</pubDate>
      
      <guid>http://bendl.me/blog/posts/compiler-assembler/</guid>
      <description>LIBCCL: Relocatable to Absolute Machine Code The libccl compiler stores all information required to transform relocatable assembly to absolute assembly in the struct prco_op_struct.
struct prco_op_struct { // Encoded 16-bit instruction word  // for printing to file  unsigned short opcode; // Instruction parts  // (opcode, register selects, immediates, etc.)  unsigned char op; unsigned char regD : 3; unsigned char regA : 3; unsigned char imm8 : 8; signed char simm5 : 5; // Optional AST pointer to provide extra information  // function, data type, etc.</description>
    </item>
    
  </channel>
</rss>